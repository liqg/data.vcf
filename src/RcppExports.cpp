// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "data.vcf_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// resize_list_string
std::vector<std::vector<std::string> > resize_list_string(std::vector<std::vector<std::string> >& x, std::vector<int>& n, std::string fill);
RcppExport SEXP _data_vcf_resize_list_string(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string> >& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_list_string(x, n, fill));
    return rcpp_result_gen;
END_RCPP
}
// str_to_ikv
Rcpp::List str_to_ikv(std::vector<std::string>& x, const char sep);
RcppExport SEXP _data_vcf_str_to_ikv(SEXP xSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const char >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(str_to_ikv(x, sep));
    return rcpp_result_gen;
END_RCPP
}
// collapse_group
std::vector<std::vector<std::string> > collapse_group(std::vector<std::vector<std::string> >& x, std::vector<std::vector<unsigned int> >& g, std::string sep, std::string fill);
RcppExport SEXP _data_vcf_collapse_group(SEXP xSEXP, SEXP gSEXP, SEXP sepSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string> >& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<unsigned int> >& >::type g(gSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< std::string >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_group(x, g, sep, fill));
    return rcpp_result_gen;
END_RCPP
}
// uniq_char
std::vector<std::string> uniq_char(std::vector<std::string> x, std::string y);
RcppExport SEXP _data_vcf_uniq_char(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(uniq_char(x, y));
    return rcpp_result_gen;
END_RCPP
}
// kvpaste_rcpp
std::vector<std::string> kvpaste_rcpp(Rcpp::DataFrame input, std::string sep1, std::string sep2, bool nakey);
RcppExport SEXP _data_vcf_kvpaste_rcpp(SEXP inputSEXP, SEXP sep1SEXP, SEXP sep2SEXP, SEXP nakeySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< std::string >::type sep2(sep2SEXP);
    Rcpp::traits::input_parameter< bool >::type nakey(nakeySEXP);
    rcpp_result_gen = Rcpp::wrap(kvpaste_rcpp(input, sep1, sep2, nakey));
    return rcpp_result_gen;
END_RCPP
}
// count_beyond_threshold
int count_beyond_threshold(Rcpp::NumericVector x, int y);
RcppExport SEXP _data_vcf_count_beyond_threshold(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(count_beyond_threshold(x, y));
    return rcpp_result_gen;
END_RCPP
}
// kvsplit_rcpp
Rcpp::DataFrame kvsplit_rcpp(std::vector<std::string> input, char sep1, char sep2, bool na);
RcppExport SEXP _data_vcf_kvsplit_rcpp(SEXP inputSEXP, SEXP sep1SEXP, SEXP sep2SEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< char >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< char >::type sep2(sep2SEXP);
    Rcpp::traits::input_parameter< bool >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(kvsplit_rcpp(input, sep1, sep2, na));
    return rcpp_result_gen;
END_RCPP
}
// col_sums
Rcpp::NumericMatrix col_sums(Rcpp::NumericMatrix m, Rcpp::List rows_list);
RcppExport SEXP _data_vcf_col_sums(SEXP mSEXP, SEXP rows_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type rows_list(rows_listSEXP);
    rcpp_result_gen = Rcpp::wrap(col_sums(m, rows_list));
    return rcpp_result_gen;
END_RCPP
}
// col_maxs
Rcpp::NumericMatrix col_maxs(Rcpp::NumericMatrix m, Rcpp::List rows_list);
RcppExport SEXP _data_vcf_col_maxs(SEXP mSEXP, SEXP rows_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type rows_list(rows_listSEXP);
    rcpp_result_gen = Rcpp::wrap(col_maxs(m, rows_list));
    return rcpp_result_gen;
END_RCPP
}
// open_file_rcpp
XPtr_gz_reader open_file_rcpp(std::string path);
RcppExport SEXP _data_vcf_open_file_rcpp(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(open_file_rcpp(path));
    return rcpp_result_gen;
END_RCPP
}
// read_lines
std::vector<std::string> read_lines(XPtr_gz_reader reader, unsigned int n);
RcppExport SEXP _data_vcf_read_lines(SEXP readerSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr_gz_reader >::type reader(readerSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(read_lines(reader, n));
    return rcpp_result_gen;
END_RCPP
}
// read_vcf_header
std::vector<std::string> read_vcf_header(XPtr_gz_reader reader);
RcppExport SEXP _data_vcf_read_vcf_header(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr_gz_reader >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vcf_header(reader));
    return rcpp_result_gen;
END_RCPP
}
// split_var_lines_rcpp
Rcpp::DataFrame split_var_lines_rcpp(std::vector<std::string> lines, std::vector<std::string> info_keys, std::vector<std::string> format_keys, std::vector<int> sample_ids, bool break_alt, std::vector<std::string> break_info_keys, std::vector<std::string> break_format_keys, std::vector<std::string> info_keys_exclude, std::vector<std::string> format_keys_exclude);
RcppExport SEXP _data_vcf_split_var_lines_rcpp(SEXP linesSEXP, SEXP info_keysSEXP, SEXP format_keysSEXP, SEXP sample_idsSEXP, SEXP break_altSEXP, SEXP break_info_keysSEXP, SEXP break_format_keysSEXP, SEXP info_keys_excludeSEXP, SEXP format_keys_excludeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type info_keys(info_keysSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type format_keys(format_keysSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type sample_ids(sample_idsSEXP);
    Rcpp::traits::input_parameter< bool >::type break_alt(break_altSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type break_info_keys(break_info_keysSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type break_format_keys(break_format_keysSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type info_keys_exclude(info_keys_excludeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type format_keys_exclude(format_keys_excludeSEXP);
    rcpp_result_gen = Rcpp::wrap(split_var_lines_rcpp(lines, info_keys, format_keys, sample_ids, break_alt, break_info_keys, break_format_keys, info_keys_exclude, format_keys_exclude));
    return rcpp_result_gen;
END_RCPP
}
// split_format_rcpp
Rcpp::DataFrame split_format_rcpp(Rcpp::CharacterVector format, Rcpp::DataFrame samples);
RcppExport SEXP _data_vcf_split_format_rcpp(SEXP formatSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type format(formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(split_format_rcpp(format, samples));
    return rcpp_result_gen;
END_RCPP
}
// vcf_breakalt_rcpp
void vcf_breakalt_rcpp(SEXP vcf, SEXP ovcf, SEXP info_keys, SEXP format_keys);
RcppExport SEXP _data_vcf_vcf_breakalt_rcpp(SEXP vcfSEXP, SEXP ovcfSEXP, SEXP info_keysSEXP, SEXP format_keysSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vcf(vcfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ovcf(ovcfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type info_keys(info_keysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type format_keys(format_keysSEXP);
    vcf_breakalt_rcpp(vcf, ovcf, info_keys, format_keys);
    return R_NilValue;
END_RCPP
}
// vcf_clean_rcpp
void vcf_clean_rcpp(SEXP vcf, SEXP ovcf, SEXP info_keys, SEXP format_keys);
RcppExport SEXP _data_vcf_vcf_clean_rcpp(SEXP vcfSEXP, SEXP ovcfSEXP, SEXP info_keysSEXP, SEXP format_keysSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vcf(vcfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ovcf(ovcfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type info_keys(info_keysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type format_keys(format_keysSEXP);
    vcf_clean_rcpp(vcf, ovcf, info_keys, format_keys);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_data_vcf_resize_list_string", (DL_FUNC) &_data_vcf_resize_list_string, 3},
    {"_data_vcf_str_to_ikv", (DL_FUNC) &_data_vcf_str_to_ikv, 2},
    {"_data_vcf_collapse_group", (DL_FUNC) &_data_vcf_collapse_group, 4},
    {"_data_vcf_uniq_char", (DL_FUNC) &_data_vcf_uniq_char, 2},
    {"_data_vcf_kvpaste_rcpp", (DL_FUNC) &_data_vcf_kvpaste_rcpp, 4},
    {"_data_vcf_count_beyond_threshold", (DL_FUNC) &_data_vcf_count_beyond_threshold, 2},
    {"_data_vcf_kvsplit_rcpp", (DL_FUNC) &_data_vcf_kvsplit_rcpp, 4},
    {"_data_vcf_col_sums", (DL_FUNC) &_data_vcf_col_sums, 2},
    {"_data_vcf_col_maxs", (DL_FUNC) &_data_vcf_col_maxs, 2},
    {"_data_vcf_open_file_rcpp", (DL_FUNC) &_data_vcf_open_file_rcpp, 1},
    {"_data_vcf_read_lines", (DL_FUNC) &_data_vcf_read_lines, 2},
    {"_data_vcf_read_vcf_header", (DL_FUNC) &_data_vcf_read_vcf_header, 1},
    {"_data_vcf_split_var_lines_rcpp", (DL_FUNC) &_data_vcf_split_var_lines_rcpp, 9},
    {"_data_vcf_split_format_rcpp", (DL_FUNC) &_data_vcf_split_format_rcpp, 2},
    {"_data_vcf_vcf_breakalt_rcpp", (DL_FUNC) &_data_vcf_vcf_breakalt_rcpp, 4},
    {"_data_vcf_vcf_clean_rcpp", (DL_FUNC) &_data_vcf_vcf_clean_rcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_data_vcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
